name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && (contains(github.event.comment.body, '@claude ') || github.event.comment.body == '@claude' || contains(github.event.comment.body, '@claude-opus ') || github.event.comment.body == '@claude-opus')) ||
      (github.event_name == 'pull_request_review_comment' && (contains(github.event.comment.body, '@claude ') || github.event.comment.body == '@claude' || contains(github.event.comment.body, '@claude-opus ') || github.event.comment.body == '@claude-opus')) ||
      (github.event_name == 'pull_request_review' && (contains(github.event.review.body, '@claude ') || github.event.review.body == '@claude' || contains(github.event.review.body, '@claude-opus ') || github.event.review.body == '@claude-opus')) ||
      (github.event_name == 'issues' && ((contains(github.event.issue.body, '@claude ') || github.event.issue.body == '@claude' || contains(github.event.issue.body, '@claude-opus ') || github.event.issue.body == '@claude-opus') || (contains(github.event.issue.title, '@claude ') || github.event.issue.title == '@claude' || contains(github.event.issue.title, '@claude-opus ') || github.event.issue.title == '@claude-opus')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Dynamic model selection based on mention
          model: |
            ${{ (
              (github.event_name == 'issue_comment' && (contains(github.event.comment.body, '@claude-opus ') || github.event.comment.body == '@claude-opus')) ||
              (github.event_name == 'pull_request_review_comment' && (contains(github.event.comment.body, '@claude-opus ') || github.event.comment.body == '@claude-opus')) ||
              (github.event_name == 'pull_request_review' && (contains(github.event.review.body, '@claude-opus ') || github.event.review.body == '@claude-opus')) ||
              (github.event_name == 'issues' && ((contains(github.event.issue.body, '@claude-opus ') || github.event.issue.body == '@claude-opus') || (contains(github.event.issue.title, '@claude-opus ') || github.event.issue.title == '@claude-opus')))
            ) && 'claude-opus-4-20250514' || 'claude-sonnet-4-20250514' }}

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Add cost output to responses
          direct_prompt: |
            ユーザーのリクエストに日本語で対応してください。
            回答の最後に以下の形式でモデル名とコスト情報を出力してください：

            ---
            🤖 モデル: [使用したモデル名]
            💰 コスト: 入力XXXトークン, 出力XXXトークン, $X.XX

          # Optional: Allow Claude to run specific commands
          # allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*)"

          # Optional: Add custom instructions for Claude to customize its behavior for your project
          # custom_instructions: |
          #   Follow our coding standards
          #   Ensure all new code has tests
          #   Use TypeScript for new files

          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test
